using System;
using System.Data;
using System.Data.SqlClient;

namespace SqlDataReaderApp
{
    public class SqlDB
    {
        public static void Main(string[] args)
        {
            SqlConnection cn = new SqlConnection();

            // For Access DB manipulation, switch connection
            // string values (adjust path if needed).
            cn.ConnectionString = @"Server=localhost\sqlexpress;database=ADO;uid=ccm;pwd=1111;";

            // Open the connection.
            cn.Open();
            
            #region Connection stats
            Console.WriteLine("***** Info about your connection *****");
            Console.WriteLine("Database location: {0}", cn.DataSource);
            Console.WriteLine("Database name: {0}", cn.Database);
            Console.WriteLine("DataSource: {0}", cn.DataSource);
            Console.WriteLine("Timeout: {0}", cn.ConnectionTimeout);
            Console.WriteLine("connectionstring: {0}", cn.ConnectionString);
            Console.WriteLine("Connection state: {0}", cn.State.ToString());
         
            // Multiple Close() calls on a closed connection OK!
            cn.Close();
            cn.Close();
            cn.Close();
            cn.Close();
            Console.WriteLine("Connection state: {0}", cn.State.ToString());
            cn.Open();
            Console.WriteLine("Connection state: {0}", cn.State.ToString());
            Console.WriteLine();
            #endregion
            
          
            // Create a SQL command.
            string strSQL = "SELECT * FROM member";
            SqlCommand myCommand = new SqlCommand(strSQL, cn);

            // 사용목적
            // - DataSet을 표현할 필요가 없다.
            // - 많은 양의 데이터를 빠르게 반복처리할 경우
            // - DataSet의 단점은
            //   한번에 모든 데이터를 가져오는 것임:메모리낭비
            SqlDataReader myDataReader;
            myDataReader = myCommand.ExecuteReader();

            // Loop over the results.
            Console.WriteLine("\n***** Red cars obtained from a DataReader *****");
            while (myDataReader.Read())
            {
                Console.Write("-> ID: {0}   ", myDataReader["id"].ToString());
                Console.Write("PWD: {0}   ", myDataReader["pwd"].ToString());
                Console.Write("PHONE: {0}   ", myDataReader["phone"].ToString());
                Console.WriteLine("ADDRESS: {0}", myDataReader["address"].ToString());
            }

            cn.Close();
            Console.WriteLine("State of connection is: {0}", cn.State);


            // Because we specified CommandBehavior.CloseConnection, we 
            // don't need to explicitly call Close() on the connection.
            myDataReader.Close(); 

        }
           
        #region Print table helper function
        private static void PrintDataTable(DataTable dt)
        {
            // Print the DataTable.
            for (int curRow = 0; curRow < dt.Rows.Count; curRow++)
            {
                for (int curCol = 0; curCol < dt.Columns.Count; curCol++)
                {
                    Console.Write(dt.Rows[curRow][curCol].ToString().Trim() + " ");
                }
                Console.WriteLine();
            }
        }
        #endregion


    }
}

